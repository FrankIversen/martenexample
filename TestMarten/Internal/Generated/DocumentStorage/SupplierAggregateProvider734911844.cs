// <auto-generated/>
#pragma warning disable
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;
using WebApplication1.Services.SupplierRepository;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertSupplierAggregateOperation734911844
    public class UpsertSupplierAggregateOperation734911844 : Marten.Internal.Operations.StorageOperation<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertSupplierAggregateOperation734911844(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_supplierrepository_supplieraggregate(?, ?, ?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session)
        {
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
            setHeaderParameter(parameters[5], session);
        }

    }

    // END: UpsertSupplierAggregateOperation734911844
    
    
    // START: InsertSupplierAggregateOperation734911844
    public class InsertSupplierAggregateOperation734911844 : Marten.Internal.Operations.StorageOperation<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertSupplierAggregateOperation734911844(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_supplierrepository_supplieraggregate(?, ?, ?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session)
        {
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
            setHeaderParameter(parameters[5], session);
        }

    }

    // END: InsertSupplierAggregateOperation734911844
    
    
    // START: UpdateSupplierAggregateOperation734911844
    public class UpdateSupplierAggregateOperation734911844 : Marten.Internal.Operations.StorageOperation<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateSupplierAggregateOperation734911844(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_update_supplierrepository_supplieraggregate(?, ?, ?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session)
        {
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
            setHeaderParameter(parameters[5], session);
        }

    }

    // END: UpdateSupplierAggregateOperation734911844
    
    
    // START: QueryOnlySupplierAggregateSelector734911844
    public class QueryOnlySupplierAggregateSelector734911844 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlySupplierAggregateSelector734911844(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate Resolve(System.Data.Common.DbDataReader reader)
        {

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = _serializer.FromJson<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = await _serializer.FromJsonAsync<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlySupplierAggregateSelector734911844
    
    
    // START: LightweightSupplierAggregateSelector734911844
    public class LightweightSupplierAggregateSelector734911844 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>, Marten.Linq.Selectors.ISelector<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightSupplierAggregateSelector734911844(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = _serializer.FromJson<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = await _serializer.FromJsonAsync<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightSupplierAggregateSelector734911844
    
    
    // START: IdentityMapSupplierAggregateSelector734911844
    public class IdentityMapSupplierAggregateSelector734911844 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>, Marten.Linq.Selectors.ISelector<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapSupplierAggregateSelector734911844(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = _serializer.FromJson<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = await _serializer.FromJsonAsync<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapSupplierAggregateSelector734911844
    
    
    // START: DirtyTrackingSupplierAggregateSelector734911844
    public class DirtyTrackingSupplierAggregateSelector734911844 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>, Marten.Linq.Selectors.ISelector<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingSupplierAggregateSelector734911844(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = _serializer.FromJson<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 1);
            var version = reader.GetFieldValue<System.Guid>(2);
            _versions[id] = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document;
            document = await _serializer.FromJsonAsync<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<System.Guid>(2, token);
            _versions[id] = version;
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingSupplierAggregateSelector734911844
    
    
    // START: OverwriteSupplierAggregateOperation734911844
    public class OverwriteSupplierAggregateOperation734911844 : Marten.Internal.Operations.StorageOperation<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OverwriteSupplierAggregateOperation734911844(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_overwrite_supplierrepository_supplieraggregate(?, ?, ?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessConcurrency(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessConcurrencyAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session)
        {
            setCurrentVersionParameter(parameters[0]);
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[1].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[2].Value = _document.GetType().FullName;
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[3].Value = document.Id;
            setVersionParameter(parameters[4]);
            setHeaderParameter(parameters[5], session);
        }

    }

    // END: OverwriteSupplierAggregateOperation734911844
    
    
    // START: QueryOnlySupplierAggregateDocumentStorage734911844
    public class QueryOnlySupplierAggregateDocumentStorage734911844 : Marten.Internal.Storage.QueryOnlyDocumentStorage<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlySupplierAggregateDocumentStorage734911844(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override System.Guid Identity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlySupplierAggregateSelector734911844(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: QueryOnlySupplierAggregateDocumentStorage734911844
    
    
    // START: LightweightSupplierAggregateDocumentStorage734911844
    public class LightweightSupplierAggregateDocumentStorage734911844 : Marten.Internal.Storage.LightweightDocumentStorage<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightSupplierAggregateDocumentStorage734911844(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override System.Guid Identity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightSupplierAggregateSelector734911844(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: LightweightSupplierAggregateDocumentStorage734911844
    
    
    // START: IdentityMapSupplierAggregateDocumentStorage734911844
    public class IdentityMapSupplierAggregateDocumentStorage734911844 : Marten.Internal.Storage.IdentityMapDocumentStorage<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapSupplierAggregateDocumentStorage734911844(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override System.Guid Identity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapSupplierAggregateSelector734911844(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: IdentityMapSupplierAggregateDocumentStorage734911844
    
    
    // START: DirtyTrackingSupplierAggregateDocumentStorage734911844
    public class DirtyTrackingSupplierAggregateDocumentStorage734911844 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingSupplierAggregateDocumentStorage734911844(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertSupplierAggregateOperation734911844
                (
                    document, Identity(document),
                    session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteSupplierAggregateOperation734911844
            (
                document, Identity(document),
                session.Versions.ForType<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>(),
                _document
                
            );
        }


        public override System.Guid Identity(WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingSupplierAggregateSelector734911844(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: DirtyTrackingSupplierAggregateDocumentStorage734911844
    
    
    // START: SupplierAggregateBulkLoader734911844
    public class SupplierAggregateBulkLoader734911844 : Marten.Internal.CodeGeneration.BulkLoader<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid> _storage;

        public SupplierAggregateBulkLoader734911844(Marten.Internal.Storage.IDocumentStorage<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_supplierrepository_supplieraggregate(\"mt_dotnet_type\", \"id\", \"mt_version\", \"headers\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_supplierrepository_supplieraggregate_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"headers\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_supplierrepository_supplieraggregate (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", \"headers\", mt_last_modified) (select mt_doc_supplierrepository_supplieraggregate_temp.\"id\", mt_doc_supplierrepository_supplieraggregate_temp.\"data\", mt_doc_supplierrepository_supplieraggregate_temp.\"mt_version\", mt_doc_supplierrepository_supplieraggregate_temp.\"mt_dotnet_type\", mt_doc_supplierrepository_supplieraggregate_temp.\"headers\", transaction_timestamp() from mt_doc_supplierrepository_supplieraggregate_temp left join public.mt_doc_supplierrepository_supplieraggregate on mt_doc_supplierrepository_supplieraggregate_temp.id = public.mt_doc_supplierrepository_supplieraggregate.id where public.mt_doc_supplierrepository_supplieraggregate.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_supplierrepository_supplieraggregate target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, headers = source.headers, mt_last_modified = transaction_timestamp() FROM mt_doc_supplierrepository_supplieraggregate_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_supplierrepository_supplieraggregate_temp as select * from public.mt_doc_supplierrepository_supplieraggregate limit 0";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(System.DBNull.Value, NpgsqlTypes.NpgsqlDbType.Jsonb);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(System.DBNull.Value, NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: SupplierAggregateBulkLoader734911844
    
    
    // START: SupplierAggregateProvider734911844
    public class SupplierAggregateProvider734911844 : Marten.Internal.Storage.DocumentProvider<WebApplication1.Services.SupplierRepository.SupplierRepository.SupplierAggregate>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public SupplierAggregateProvider734911844(Marten.Schema.DocumentMapping mapping) : base(new SupplierAggregateBulkLoader734911844(new QueryOnlySupplierAggregateDocumentStorage734911844(mapping)), new QueryOnlySupplierAggregateDocumentStorage734911844(mapping), new LightweightSupplierAggregateDocumentStorage734911844(mapping), new IdentityMapSupplierAggregateDocumentStorage734911844(mapping), new DirtyTrackingSupplierAggregateDocumentStorage734911844(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: SupplierAggregateProvider734911844
    
    
}

